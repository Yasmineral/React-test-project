 Use arrow functions for custom methods otherwise 'this' will be undefined...

  e.g markComplete = () => {}

...if a method is part of the compenent class, e.g render, 'this' is available & in scope.
For custom methods, you could either bind this OR more simply, use an arrow function.

 
Without a state manager, you need to climb the tree (called compenent drilling?)
Since we have our state inside of App.js, we can't simply say 'this.setState' and change the value to true or false
We have to go from todoItem -> Todos -> App. The way we do this is through props.
We create methods inside of our props and we call those. 


To pass along id's, you could bind the id to the markcomplete props.
e.g onChange={this.props.markComplete.bind(this, this.props.todo.id)
But this can get tedious. Instead we can use something called 'destructuring' to pull the variables out of the todo & the props.
e.g const { id, title } = this.props.todo 
Now you can refer to id and title without 'this.props' etc.


Markcomplete method within app.js is now toggling the state at the top (between true and false depending
on whether the item has been clicked), and this state is being brought down through the props into
the componments. Think of state as a cloud of data that hovers above all the componments, and then we're sending something
up to change it, and then it rains back down. It's a one way data flow.

Delete function - we do this with the filter method which loops through all the todo items and then, based on a condition,
will return another array. So in this case, we only want to return todos that don't match the id that's
passed in. The spread operator (three dots '...') copies everything that's already there in the todos object.
Todo's will return on reload as we are not persisting to a database.

Header.js in layout folder - return is similar to render. So, when we have a class we have different
methods e.g render, componentDidMount. With a functional componenet, there's one return
that works like the render does. 